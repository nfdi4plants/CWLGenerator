"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandOutputBinding = void 0;
const internal_1 = require("./util/internal");
/**
 * Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputBinding
 *
 * Describes how to generate an output parameter based on the files produced
 * by a CommandLineTool.
 *
 * The output parameter value is generated by applying these operations in the
 * following order:
 *
 *   - glob
 *   - loadContents
 *   - outputEval
 *   - secondaryFiles
 *
 */
class CommandOutputBinding extends internal_1.Saveable {
    constructor({ extensionFields, loadingOptions, loadContents, loadListing, glob, outputEval }) {
        super();
        this.extensionFields = extensionFields !== null && extensionFields !== void 0 ? extensionFields : {};
        this.loadingOptions = loadingOptions !== null && loadingOptions !== void 0 ? loadingOptions : new internal_1.LoadingOptions({});
        this.loadContents = loadContents;
        this.loadListing = loadListing;
        this.glob = glob;
        this.outputEval = outputEval;
    }
    /**
     * Used to construct instances of {@link CommandOutputBinding }.
     *
     * @param __doc                           Document fragment to load this record object from.
     * @param baseuri                         Base URI to generate child document IDs against.
     * @param loadingOptions                  Context for loading URIs and populating objects.
     * @param docRoot                         ID at this position in the document (if available)
     * @returns                               An instance of {@link CommandOutputBinding }
     * @throws {@link ValidationException}    If the document fragment is not a
     *                                        {@link Dictionary} or validation of fields fails.
     */
    static fromDoc(__doc, baseuri, loadingOptions, docRoot) {
        return __awaiter(this, void 0, void 0, function* () {
            const _doc = Object.assign({}, __doc);
            const __errors = [];
            let loadContents;
            if ('loadContents' in _doc) {
                try {
                    loadContents = yield (0, internal_1.loadField)(_doc.loadContents, internal_1.LoaderInstances.unionOfundefinedtypeOrbooltype, baseuri, loadingOptions);
                }
                catch (e) {
                    if (e instanceof internal_1.ValidationException) {
                        __errors.push(new internal_1.ValidationException('the `loadContents` field is not valid because: ', [e]));
                    }
                    else {
                        throw e;
                    }
                }
            }
            let loadListing;
            if ('loadListing' in _doc) {
                try {
                    loadListing = yield (0, internal_1.loadField)(_doc.loadListing, internal_1.LoaderInstances.unionOfundefinedtypeOrLoadListingEnumLoader, baseuri, loadingOptions);
                }
                catch (e) {
                    if (e instanceof internal_1.ValidationException) {
                        __errors.push(new internal_1.ValidationException('the `loadListing` field is not valid because: ', [e]));
                    }
                    else {
                        throw e;
                    }
                }
            }
            let glob;
            if ('glob' in _doc) {
                try {
                    glob = yield (0, internal_1.loadField)(_doc.glob, internal_1.LoaderInstances.unionOfundefinedtypeOrstrtypeOrExpressionLoaderOrarrayOfstrtype, baseuri, loadingOptions);
                }
                catch (e) {
                    if (e instanceof internal_1.ValidationException) {
                        __errors.push(new internal_1.ValidationException('the `glob` field is not valid because: ', [e]));
                    }
                    else {
                        throw e;
                    }
                }
            }
            let outputEval;
            if ('outputEval' in _doc) {
                try {
                    outputEval = yield (0, internal_1.loadField)(_doc.outputEval, internal_1.LoaderInstances.unionOfundefinedtypeOrExpressionLoader, baseuri, loadingOptions);
                }
                catch (e) {
                    if (e instanceof internal_1.ValidationException) {
                        __errors.push(new internal_1.ValidationException('the `outputEval` field is not valid because: ', [e]));
                    }
                    else {
                        throw e;
                    }
                }
            }
            const extensionFields = {};
            for (const [key, value] of Object.entries(_doc)) {
                if (!CommandOutputBinding.attr.has(key)) {
                    if (key.includes(':')) {
                        const ex = (0, internal_1.expandUrl)(key, '', loadingOptions, false, false);
                        extensionFields[ex] = value;
                    }
                    else {
                        __errors.push(new internal_1.ValidationException(`invalid field ${key}, \
            expected one of: \`loadContents\`,\`loadListing\`,\`glob\`,\`outputEval\``));
                        break;
                    }
                }
            }
            if (__errors.length > 0) {
                throw new internal_1.ValidationException("Trying 'CommandOutputBinding'", __errors);
            }
            const schema = new CommandOutputBinding({
                extensionFields: extensionFields,
                loadingOptions: loadingOptions,
                loadContents: loadContents,
                loadListing: loadListing,
                glob: glob,
                outputEval: outputEval
            });
            return schema;
        });
    }
    save(top = false, baseUrl = '', relativeUris = true) {
        const r = {};
        for (const ef in this.extensionFields) {
            r[(0, internal_1.prefixUrl)(ef, this.loadingOptions.vocab)] = this.extensionFields.ef;
        }
        if (this.loadContents != null) {
            r.loadContents = (0, internal_1.save)(this.loadContents, false, baseUrl, relativeUris);
        }
        if (this.loadListing != null) {
            r.loadListing = (0, internal_1.save)(this.loadListing, false, baseUrl, relativeUris);
        }
        if (this.glob != null) {
            r.glob = (0, internal_1.save)(this.glob, false, baseUrl, relativeUris);
        }
        if (this.outputEval != null) {
            r.outputEval = (0, internal_1.save)(this.outputEval, false, baseUrl, relativeUris);
        }
        if (top) {
            if (this.loadingOptions.namespaces != null) {
                r.$namespaces = this.loadingOptions.namespaces;
            }
            if (this.loadingOptions.schemas != null) {
                r.$schemas = this.loadingOptions.schemas;
            }
        }
        return r;
    }
}
exports.CommandOutputBinding = CommandOutputBinding;
CommandOutputBinding.attr = new Set(['loadContents', 'loadListing', 'glob', 'outputEval']);
//# sourceMappingURL=commandOutputBinding.js.map